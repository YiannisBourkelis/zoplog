#!/bin/bash

# ZopLog DNS Dispatcher Script
# This script automatically updates /etc/resolv.conf with the current default gateway IP
# as the DNS server. This ensures that DNS resolution works properly on the ZopLog system
# itself, especially when the internet gateway IP changes.
#
# The script monitors ethernet (eth*, enp*), wireless (wlan*, wl*), and bridge (br-zoplog)
# interfaces for "up" events and updates DNS accordingly. It also runs on boot to ensure
# DNS is set correctly.
#
# Key features:
# - Monitors multiple interface types for network changes
# - Updates DNS only when the gateway actually changes
# - Provides detailed logging for troubleshooting
# - Handles both IPv4 and IPv6 configurations
# - Works with NetworkManager dispatcher system
# - Includes fallback DNS servers for reliability
# - Better network transition handling

INTERFACE="$1"
STATUS="$2"

# Act on ethernet, wireless, and bridge interfaces when they come up
if [[ "$INTERFACE" =~ ^(eth|enp|wlan|wl|br-zoplog) ]]; then
    # Only process "up" events for ethernet/bridge interfaces
    if [ "$STATUS" != "up" ]; then
        exit 0
    fi
else
    # For other interfaces, only process if no interface is specified (boot scenario)
    if [ -n "$INTERFACE" ]; then
        exit 0
    fi
fi

# Function to handle full network reconfiguration
reconfigure_network() {
    logger "zoplog-dns-dispatcher: Starting full network reconfiguration"

    # Get the current default gateway IP
    GATEWAY_IP=$(ip route show default | awk '/default/ {print $3; exit}')

    if [ -n "$GATEWAY_IP" ]; then
        logger "zoplog-dns-dispatcher: Found gateway $GATEWAY_IP"

        # Calculate new bridge IP (use .21 to avoid conflicts with router)
        BRIDGE_IP="${GATEWAY_IP%.*}.21"
        logger "zoplog-dns-dispatcher: Calculated bridge IP $BRIDGE_IP"

        # Check if bridge IP needs to be updated
        CURRENT_BRIDGE_IP=$(ip addr show br-zoplog 2>/dev/null | grep -o "inet [0-9.]*" | cut -d' ' -f2 | cut -d'/' -f1)

        if [ "$CURRENT_BRIDGE_IP" != "$BRIDGE_IP" ]; then
            logger "zoplog-dns-dispatcher: Bridge IP changed from $CURRENT_BRIDGE_IP to $BRIDGE_IP"

            # Remove old bridge IP
            if [ -n "$CURRENT_BRIDGE_IP" ]; then
                ip addr del "$CURRENT_BRIDGE_IP/24" dev br-zoplog 2>/dev/null || true
                logger "zoplog-dns-dispatcher: Removed old bridge IP $CURRENT_BRIDGE_IP"
            fi

            # Add new bridge IP
            ip addr add "$BRIDGE_IP/24" dev br-zoplog 2>/dev/null || true
            logger "zoplog-dns-dispatcher: Added new bridge IP $BRIDGE_IP"

            # Clean up conflicting routes from all physical interfaces
            # Find all ethernet/wireless interfaces (excluding bridge and loopback)
            for iface in $(ip link show | grep -E "^[0-9]+: (eth|enp|wlan|wl)" | cut -d: -f2 | tr -d ' ' | grep -v br-zoplog); do
                ip route flush dev "$iface" 2>/dev/null || true
                logger "zoplog-dns-dispatcher: Cleaned routes from interface $iface"
            done

            # Add proper routing
            ip route add "$GATEWAY_IP/32" dev br-zoplog 2>/dev/null || true
            ip route add "${GATEWAY_IP%.*}.0/24" dev br-zoplog 2>/dev/null || true
            ip route add default via "$GATEWAY_IP" dev br-zoplog 2>/dev/null || true
            logger "zoplog-dns-dispatcher: Updated routing configuration"

            # Force ARP update
            arping -c 2 -I br-zoplog "$GATEWAY_IP" 2>/dev/null || true
            logger "zoplog-dns-dispatcher: Sent ARP updates"
        else
            logger "zoplog-dns-dispatcher: Bridge IP already correct ($BRIDGE_IP)"
        fi
    else
        logger "zoplog-dns-dispatcher: No gateway found, cannot reconfigure network"
        return 1
    fi
}

# Function to update DNS to current gateway
update_dns() {
    # Get the current default gateway IP
    GATEWAY_IP=$(ip route show default | awk '/default/ {print $3; exit}')

    if [ -n "$GATEWAY_IP" ]; then
        # Check current DNS configuration
        CURRENT_DNS=$(grep -E "^nameserver" /etc/resolv.conf | head -1 | awk '{print $2}')

        if [ "$CURRENT_DNS" != "$GATEWAY_IP" ]; then
            # Backup current resolv.conf
            cp /etc/resolv.conf /etc/resolv.conf.backup 2>/dev/null || true

            # Update DNS to use the gateway IP with fallback servers
            cat > /etc/resolv.conf << EOF
# Generated by zoplog-dns-dispatcher
# Primary DNS: Router/Gateway
nameserver $GATEWAY_IP
# Fallback DNS servers
nameserver 8.8.8.8
nameserver 8.8.4.4
nameserver 1.1.1.1
EOF

            logger "zoplog-dns-dispatcher: Updated DNS to gateway $GATEWAY_IP (was $CURRENT_DNS)"

            # Test DNS resolution
            if nslookup google.com >/dev/null 2>&1; then
                logger "zoplog-dns-dispatcher: DNS resolution test successful"
            else
                logger "zoplog-dns-dispatcher: DNS resolution test failed, trying fallback"
                # If gateway DNS fails, use public DNS only
                cat > /etc/resolv.conf << EOF
# Generated by zoplog-dns-dispatcher (fallback mode)
nameserver 8.8.8.8
nameserver 8.8.4.4
nameserver 1.1.1.1
EOF
            fi
        else
            logger "zoplog-dns-dispatcher: DNS already correct ($GATEWAY_IP)"
        fi
    else
        logger "zoplog-dns-dispatcher: No default gateway found, using fallback DNS"
        # No gateway found, use public DNS
        cat > /etc/resolv.conf << EOF
# Generated by zoplog-dns-dispatcher (no gateway mode)
nameserver 8.8.8.8
nameserver 8.8.4.4
nameserver 1.1.1.1
EOF
    fi
}

# Update network configuration and DNS
logger "zoplog-dns-dispatcher: Processing interface $INTERFACE status $STATUS"
reconfigure_network
update_dns

# Boot-time check (when no interface/status provided)
if [ -z "$INTERFACE" ] || [ -z "$STATUS" ]; then
    logger "zoplog-dns-dispatcher: Boot-time network initialization"
    # Wait longer for network to settle on boot
    sleep 15
    reconfigure_network
    update_dns

    # Additional check for network services
    sleep 5
    # Restart networking services if needed
    if ! systemctl is-active ssh >/dev/null 2>&1 && ! systemctl is-active sshd >/dev/null 2>&1; then
        systemctl restart ssh 2>/dev/null || systemctl restart sshd 2>/dev/null || true
        logger "zoplog-dns-dispatcher: Restarted SSH service"
    fi

    if ! systemctl is-active nginx >/dev/null 2>&1; then
        systemctl restart nginx 2>/dev/null || true
        logger "zoplog-dns-dispatcher: Restarted nginx service"
    fi
fi
